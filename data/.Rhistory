print(matrix(as.numeric(format(res, digi=4)), ncol=4))
esterr[1:10^3] < bound
mean(esterr[1:10^3] < bound)
mean(esterr[1:10^2] < bound)
mean(esterr[1:10^1] < bound)
mean(esterr[1:10^4] < bound)
bound <- qnorm(0.95)
res <- matrix(0, ncol=4, nrow=1)
for(i in c(1, 2, 3))
res[i-1] <- mean(esterr[1:10^i] < bound)
res[4] <- mean(esterr < bound)
print(matrix(as.numeric(format(res, digi=4)), ncol=4))
for(i in 2:3)
i
for(i in 2:3)
print(i)
for(i in 2:4)
res[i-1] <- mean(esterr[1:10^i] < bound)
print(matrix(as.numeric(format(res, digi=4)), ncol=4))
res[1] <- mean(esterr[1:10^1] < bound)
res
res[2] <- mean(esterr[1:10^2] < bound)
res[3] <- mean(esterr[1:10^3] < bound)
res
res[4] <- mean(esterr < bound)
res
bound <- qnorm(0.95)
res <- matrix(0, ncol=4, nrow=1)
for(i in 1:3)
res[i] <- mean(esterr[1:10^i] < bound)
res[4] <- mean(esterr < bound)
print(matrix(as.numeric(format(res, digi=4)), ncol=4))
# コーシー分布にしたがう確率変数を発生させたモンテ・カルロ積分
# 推定値の標準誤差と収束をモニター
Nsim <- 10^4
par(mfrow=c(1,3))
theta <- rcauchy(Nsim, location=0, scale=1)
for(x in c(0,2,4)){
Dfl_n <- function(theta, x){theta*exp(-(x-theta)**2/2)}
Dfl_d <- function(theta, x){exp(-(x-theta)**2/2)}
n <- Dfl_n(theta, x) # 分子
d <- Dfl_d(theta, x) # 分母
# 無限大にならないようにする
n <- n[d != 0]
d <- d[d != 0]
estint <- (cumsum(n)/(1:length(n))) / (cumsum(d)/(1:length(d)))
esterr <- sqrt(cumsum((n/d-estint)^2))/(1:length(n/d))
ymin <- min(estint-2*esterr)
ymax <- max(estint+2*esterr)
plot(estint,xlab="Mean",main=paste("x = ",x,", Estimate= ",mean(estint)),type="l",lwd=2,ylim=c(ymin,ymax),ylab="")
lines(estint+2*esterr,col="gold",lwd=2)
lines(estint-2*esterr,col="gold",lwd=2)
# 確率 0.95で3 桁の正確さを確認する
bound <- qnorm(0.95)
res <- matrix(0, ncol=4, nrow=1)
for(i in 1:3)
res[i] <- mean(esterr[1:10^i] < bound)
res[4] <- mean(esterr < bound)
print(matrix(as.numeric(format(res, digi=4)), ncol=4))
}
bound <- qnorm(0.95)
res <- matrix(0, ncol=4, nrow=1)
for(i in 1:3)
res[i] <- mean(esterr[1:10^i] < bound)
res[4] <- mean(esterr < bound)
print(matrix(as.numeric(format(res, digi=4)), ncol=4))
bound
esterr[1:10^1]
(esterr[1:10^2] < bound)
(esterr[1:10^1] < bound)
esterr[1:10^1]
bound
esterr[1:10^1]
summary(esterr)
esterr
ymin <- min(estint-2*esterr)
n <- n[d != 0]
# 正規分布にしたがう確率変数を発生させたモンテ・カルロ積分
# 推定値の標準誤差と収束をモニター
Nsim <- 10^4
par(mfrow=c(1,3))
theta <- rnorm(Nsim, location=0, scale=1)
for(x in c(0,2,4)){
Dfl_n <- function(theta, x){theta*(1/(pi*(1+theta^2)))}
Dfl_d <- function(theta, x){(1/(pi*(1+theta^2)))}
n <- Dfl_n(theta, x) # 分子
d <- Dfl_d(theta, x) # 分母
# 無限大にならないようにする
n <- n[d != 0]
d <- d[d != 0]
estint <- (cumsum(n)/(1:length(n))) / (cumsum(d)/(1:length(d)))
esterr <- sqrt(cumsum((n/d-estint)^2))/(1:length(n/d))
ymin <- min(estint-2*esterr)
ymax <- max(estint+2*esterr)
plot(estint,xlab="Mean",main=paste("x = ",x,", Estimate= ",mean(estint)),type="l",lwd=2,ylim=c(ymin,ymax),ylab="")
lines(estint+2*esterr,col="gold",lwd=2)
lines(estint-2*esterr,col="gold",lwd=2)
# 確率 0.95で3 桁の正確さを確認する
bound <- qnorm(0.95)
res <- matrix(0, ncol=4, nrow=1)
for(i in 1:3)
res[i] <- mean(esterr[1:10^i] < bound)
res[4] <- mean(esterr < bound)
print(matrix(as.numeric(format(res, digi=4)), ncol=4))
}
# 正規分布にしたがう確率変数を発生させたモンテ・カルロ積分
# 推定値の標準誤差と収束をモニター
Nsim <- 10^4
par(mfrow=c(1,3))
theta <- rnorm(Nsim, location=0, scale=1)
for(x in c(0,2,4)){
Dfl_n <- function(theta, x){theta*(1/(pi*(1+theta^2)))}
Dfl_d <- function(theta, x){(1/(pi*(1+theta^2)))}
n <- Dfl_n(theta, x) # 分子
d <- Dfl_d(theta, x) # 分母
# 無限大にならないようにする
n <- n[d != 0]
d <- d[d != 0]
estint <- (cumsum(n)/(1:length(n))) / (cumsum(d)/(1:length(d)))
esterr <- sqrt(cumsum((n/d-estint)^2))/(1:length(n/d))
ymin <- min(estint-2*esterr)
ymax <- max(estint+2*esterr)
plot(estint,xlab="Mean",main=paste("x = ",x,", Estimate= ",mean(estint)),type="l",lwd=2,ylim=c(ymin,ymax),ylab="")
lines(estint+2*esterr,col="gold",lwd=2)
lines(estint-2*esterr,col="gold",lwd=2)
# 確率 0.95で3 桁の正確さを確認する
bound <- qnorm(0.95)
res <- matrix(0, ncol=4, nrow=1)
for(i in 1:3)
res[i] <- mean(esterr[1:10^i] < bound)
res[4] <- mean(esterr < bound)
print(matrix(as.numeric(format(res, digi=4)), ncol=4))
}
# 正規分布にしたがう確率変数を発生させたモンテ・カルロ積分
# 推定値の標準誤差と収束をモニター
Nsim <- 10^4
par(mfrow=c(1,3))
theta <- rnorm(Nsim, location=0, scale=1)
for(x in c(0,2,4)){
Dfl_n <- function(theta, x){theta*(1/(pi*(1+theta^2)))}
Dfl_d <- function(theta, x){(1/(pi*(1+theta^2)))}
n <- Dfl_n(theta, x) # 分子
d <- Dfl_d(theta, x) # 分母
# 無限大にならないようにする
n <- n[d != 0]
d <- d[d != 0]
estint <- (cumsum(n)/(1:length(n))) / (cumsum(d)/(1:length(d)))
esterr <- sqrt(cumsum((n/d-estint)^2))/(1:length(n/d))
ymin <- min(estint-2*esterr)
ymax <- max(estint+2*esterr)
plot(estint,xlab="Mean",main=paste("x = ",x,", Estimate= ",mean(estint)),type="l",lwd=2,ylim=c(ymin,ymax),ylab="")
lines(estint+2*esterr,col="gold",lwd=2)
lines(estint-2*esterr,col="gold",lwd=2)
# 確率 0.95で3 桁の正確さを確認する
bound <- qnorm(0.95)
res <- matrix(0, ncol=4, nrow=1)
for(i in 1:3)
res[i] <- mean(esterr[1:10^i] < bound)
res[4] <- mean(esterr < bound)
print(matrix(as.numeric(format(res, digi=4)), ncol=4))
}
# 正規分布にしたがう確率変数を発生させたモンテ・カルロ積分
# 推定値の標準誤差と収束をモニター
Nsim <- 10^4
par(mfrow=c(1,3))
theta <- rnorm(Nsim, location=0, scale=1)
for(x in c(0,2,4)){
Dfl_n <- function(theta, x){theta*(1/(pi*(1+theta^2)))}
Dfl_d <- function(theta, x){(1/(pi*(1+theta^2)))}
n <- Dfl_n(theta, x) # 分子
d <- Dfl_d(theta, x) # 分母
# 無限大にならないようにする
n <- n[d != 0]
d <- d[d != 0]
estint <- (cumsum(n)/(1:length(n))) / (cumsum(d)/(1:length(d)))
esterr <- sqrt(cumsum((n/d-estint)^2))/(1:length(n/d))
ymin <- min(estint-2*esterr)
ymax <- max(estint+2*esterr)
plot(estint,xlab="Mean",main=paste("x = ",x,", Estimate= ",mean(estint)),type="l",lwd=2,ylim=c(ymin,ymax),ylab="")
lines(estint+2*esterr,col="gold",lwd=2)
lines(estint-2*esterr,col="gold",lwd=2)
# 確率 0.95で3 桁の正確さを確認する
bound <- qnorm(0.95)
res <- matrix(0, ncol=4, nrow=1)
for(i in 1:3)
res[i] <- mean(esterr[1:10^i] < bound)
res[4] <- mean(esterr < bound)
print(matrix(as.numeric(format(res, digi=4)), ncol=4))
}
# 正規分布にしたがう確率変数を発生させたモンテ・カルロ積分
# 推定値の標準誤差と収束をモニター
Nsim <- 10^4
par(mfrow=c(1,3))
theta <- rnorm(Nsim)
for(x in c(0,2,4)){
Dfl_n <- function(theta, x){theta*(1/(pi*(1+theta^2)))}
Dfl_d <- function(theta, x){(1/(pi*(1+theta^2)))}
n <- Dfl_n(theta, x) # 分子
d <- Dfl_d(theta, x) # 分母
# 無限大にならないようにする
n <- n[d != 0]
d <- d[d != 0]
estint <- (cumsum(n)/(1:length(n))) / (cumsum(d)/(1:length(d)))
esterr <- sqrt(cumsum((n/d-estint)^2))/(1:length(n/d))
ymin <- min(estint-2*esterr)
ymax <- max(estint+2*esterr)
plot(estint,xlab="Mean",main=paste("x = ",x,", Estimate= ",mean(estint)),type="l",lwd=2,ylim=c(ymin,ymax),ylab="")
lines(estint+2*esterr,col="gold",lwd=2)
lines(estint-2*esterr,col="gold",lwd=2)
# 確率 0.95で3 桁の正確さを確認する
bound <- qnorm(0.95)
res <- matrix(0, ncol=4, nrow=1)
for(i in 1:3)
res[i] <- mean(esterr[1:10^i] < bound)
res[4] <- mean(esterr < bound)
print(matrix(as.numeric(format(res, digi=4)), ncol=4))
}
# 正規分布にしたがう確率変数を発生させたモンテ・カルロ積分
# 推定値の標準誤差と収束をモニター
Nsim <- 10^4
par(mfrow=c(1,3))
theta <- rnorm(Nsim)
for(x in c(0,2,4)){
Dfl_n <- function(theta, x){theta*(1/(pi*(1+theta^2)))}
Dfl_d <- function(theta, x){(1/(pi*(1+theta^2)))}
n <- Dfl_n(theta, x) # 分子
d <- Dfl_d(theta, x) # 分母
# 無限大にならないようにする
n <- n[d != 0]
d <- d[d != 0]
estint <- (cumsum(n)/(1:length(n))) / (cumsum(d)/(1:length(d)))
esterr <- sqrt(cumsum((n/d-estint)^2))/(1:length(n/d))
ymin <- min(estint-2*esterr)
ymax <- max(estint+2*esterr)
plot(estint,xlab="Mean",main=paste("x = ",x,", Estimate= ",mean(estint)),type="l",lwd=2,ylim=c(ymin,ymax),ylab="")
lines(estint+2*esterr,col="gold",lwd=2)
lines(estint-2*esterr,col="gold",lwd=2)
# 確率 0.95で3 桁の正確さを確認する
bound <- qnorm(0.95)
res <- matrix(0, ncol=4, nrow=1)
for(i in 1:3)
res[i] <- mean(esterr[1:10^i] < bound)
res[4] <- mean(esterr < bound)
print(matrix(as.numeric(format(res, digi=4)), ncol=4))
}
# 正規分布にしたがう確率変数を発生させたモンテ・カルロ積分
# 推定値の標準誤差と収束をモニター
Nsim <- 10^4
par(mfrow=c(1,3))
for(x in c(0,2,4)){
theta <- rnorm(Nsim, mean=x)
Dfl_n <- function(theta, x){theta*(1/(pi*(1+theta^2)))}
Dfl_d <- function(theta, x){(1/(pi*(1+theta^2)))}
n <- Dfl_n(theta, x) # 分子
d <- Dfl_d(theta, x) # 分母
# 無限大にならないようにする
n <- n[d != 0]
d <- d[d != 0]
estint <- (cumsum(n)/(1:length(n))) / (cumsum(d)/(1:length(d)))
esterr <- sqrt(cumsum((n/d-estint)^2))/(1:length(n/d))
ymin <- min(estint-2*esterr)
ymax <- max(estint+2*esterr)
plot(estint,xlab="Mean",main=paste("x = ",x,", Estimate= ",mean(estint)),type="l",lwd=2,ylim=c(ymin,ymax),ylab="")
lines(estint+2*esterr,col="gold",lwd=2)
lines(estint-2*esterr,col="gold",lwd=2)
# 確率 0.95で3 桁の正確さを確認する
bound <- qnorm(0.95)
res <- matrix(0, ncol=4, nrow=1)
for(i in 1:3)
res[i] <- mean(esterr[1:10^i] < bound)
res[4] <- mean(esterr < bound)
print(matrix(as.numeric(format(res, digi=4)), ncol=4))
}
# 正規分布にしたがう確率変数を発生させたモンテ・カルロ積分
# 推定値の標準誤差と収束をモニター
Nsim <- 10^4
par(mfrow=c(1,3))
for(x in c(0,2,4)){
theta <- rnorm(Nsim, mean=x)
Dfl_n <- function(theta, x){theta*(1/(pi*(1+theta^2)))}
Dfl_d <- function(theta, x){(1/(pi*(1+theta^2)))}
n <- Dfl_n(theta, x) # 分子
d <- Dfl_d(theta, x) # 分母
# 無限大にならないようにする
n <- n[d != 0]
d <- d[d != 0]
estint <- (cumsum(n)/(1:length(n))) / (cumsum(d)/(1:length(d)))
esterr <- sqrt(cumsum((n/d-estint)^2))/(1:length(n/d))
ymin <- min(estint-2*esterr)
ymax <- max(estint+2*esterr)
plot(estint,xlab="Mean",main=paste("x = ",x,", Estimate= ",mean(estint)),type="l",lwd=2,ylim=c(ymin,ymax),ylab="")
lines(estint+2*esterr,col="gold",lwd=2)
lines(estint-2*esterr,col="gold",lwd=2)
# 確率 0.95で3 桁の正確さを確認する
bound <- qnorm(0.95)
res <- matrix(0, ncol=4, nrow=1)
for(i in 1:3)
res[i] <- mean(esterr[1:10^i] < bound)
res[4] <- mean(esterr < bound)
print(matrix(as.numeric(format(res, digi=4)), ncol=4))
}
# コーシー分布にしたがう確率変数を発生させたモンテ・カルロ積分
# 推定値の標準誤差と収束をモニター
Nsim <- 10^4
par(mfrow=c(1,3))
theta <- rcauchy(Nsim, location=0, scale=1)
for(x in c(0,2,4)){
Dfl_n <- function(theta, x){theta*exp(-(x-theta)**2/2)}
Dfl_d <- function(theta, x){exp(-(x-theta)**2/2)}
n <- Dfl_n(theta, x) # 分子
d <- Dfl_d(theta, x) # 分母
# 無限大にならないようにする
n <- n[d != 0]
d <- d[d != 0]
estint <- (cumsum(n)/(1:length(n))) / (cumsum(d)/(1:length(d)))
esterr <- sqrt(cumsum((n/d-estint)^2))/(1:length(n/d))
ymin <- min(estint-2*esterr)
ymax <- max(estint+2*esterr)
plot(estint,xlab="Mean",main=paste("x = ",x,", Estimate= ",mean(estint)),type="l",lwd=2,ylim=c(ymin,ymax),ylab="")
lines(estint+2*esterr,col="gold",lwd=2)
lines(estint-2*esterr,col="gold",lwd=2)
# 確率 0.95で3 桁の正確さを確認する
bound <- qnorm(0.95)
res <- matrix(0, ncol=4, nrow=1)
for(i in 1:3)
res[i] <- mean(esterr[1:10^i] < bound)
res[4] <- mean(esterr < bound)
print(matrix(as.numeric(format(res, digi=4)), ncol=4))
}
setwd("/Users/yusuke/Documents/数学なんでも相談所/2016-08-07_データサイエンティスト協会スキルチェックリスト/example/data")
tokyo_hours <- read.csv("~/Documents/\x50\xB6\x0A\x03\x07\x02\x68\xA7\x20/2016-08-07_\x07\x0C\x0F\x05\x04\x08\x03\x06\x03\x09\x08\x34\xFA\x09\x0D\x0B\x01\x07\x03\x0F\x0A\x09\x08/example/data/tokyo_hours.csv", row.names=1, quote="")
View(tokyo_hours)
getwd()
ls
ls()
read.csv("tokyo_hours.csv")
tokyo.hours < read.csv("tokyo_hours.csv")
tokyo.hours <- read.csv("tokyo_hours.csv")
View(tokyo.hours)
library("ggplot2")
View(tokyo.hours)
ggplot(tokyo.hours, aes(x="年月日", y="平均気温"))
tokyo.hours < read.csv("tokyo_hours.csv")
tokyo.hours <- read.csv("~/Documents/\x50\xB6\x0A\x03\x07\x02\x68\xA7\x20/2016-08-07_\x07\x0C\x0F\x05\x04\x08\x03\x06\x03\x09\x08\x34\xFA\x09\x0D\x0B\x01\x07\x03\x0F\x0A\x09\x08/example/data/tokyo_hours.csv", quote="")
View(tokyo.hours)
tokyo.hours <- read.csv("tokyo_hours.csv", quote="")
View(tokyo.hours)
tokyo.hours <- read.csv("tokyo_hours.csv", quote="")
ggplot(tokyo.hours, aes(x=datetime, y=temperature)) + geom_line()
ggplot(tokyo.hours, aes(x=datetime, y=temperature)) + geom_point
()
ggplot(tokyo.hours, aes(x=datetime, y=temperature)) + geom_point()
ggplot(tokyo.hours, aes(temperature)) + geom_histogram()
summary(tokyo.hours)
as.Date(tokyo.hours$datetime , "%y/%m/%d %h:%m:%s")
as.Datetimew(tokyo.hours$datetime , "%y/%m/%d %h:%m:%s")
as.Datetime(tokyo.hours$datetime , "%y/%m/%d %h:%m:%s")
as.POSIXct(tokyo.hours$datetime , "%y/%m/%d %h:%m:%s")
tokyo.hours$datetime <- as.POSIXct(tokyo.hours$datetime, "%y/%m/%d %h:%m:%s")
View(tokyo.hours)
summary(tokyo.hours)
ggplot(tokyo.hours, aes(temperature)) + geom_histogram()
ggplot(tokyo.hours, aes(x=datetime, y=temperature)) + geom_point()
library("dplyr")
tokyo.hours.10000 <- sample_n(tbl = tokyo.hours, size = 10000)
tokyo.hours.10par <- sample_frac(tbl = tokyo.hours, size = 0.1)
tokyo.hours.10000 <- sample_n(tbl = tokyo.hours, size = 1000)
tokyo.hours.10par <- sample_frac(tbl = tokyo.hours, size = 0.1)
tokyo.hours.1000 <- sample_n(tbl = tokyo.hours, size = 1000)
ggplot(tokyo.hours.1000, aes(x=datetime, y=temperature)) + geom_point()
tokyo.hours.10par <- sample_frac(tbl = tokyo.hours, size = 0.1)
ggplot(tokyo.hours.10par, aes(x=datetime, y=temperature)) + geom_point()
tokyo.hours.1000 <- sample_n(tbl = tokyo.hours, size = 1000)
ggplot(tokyo.hours.1000, aes(x=datetime, y=temperature)) + geom_point()
tokyo.hours.10par <- sample_frac(tbl = tokyo.hours, size = 0.1)
ggplot(tokyo.hours.10par, aes(x=datetime, y=temperature)) + geom_point()
tokyo.hours.10par <- sample_frac(tbl = tokyo.hours, size = 0.1)
ggplot(tokyo.hours.10par, aes(x=datetime, y=temperature)) + geom_point()
ggplot(tokyo.hours.1000, aes(x=datetime, y=temperature)) + geom_line()
ggplot(tokyo.hours.10par, aes(x=datetime, y=temperature)) + geom_line()
ggplot(tokyo.hours, aes(x=datetime, y=temperature)) + geom_line()
ggplot(tokyo.hours.10par, aes(x=datetime, y=temperature)) + geom_bar()
ggplot(tokyo.hours.10par, aes(x=datetime, y=temperature)) + geom_point()
ggplot(tokyo.hours.10par, aes(x=datetime, y=temperature)) + geom_point() + geom_smooth()
format(tokyo.hours.10par$datetime, "%d %b %Y")
format(tokyo.hours.10par$datetime, "%Y%b%d")
format(tokyo.hours.10par$datetime, "%Y%m%d")
format(tokyo.hours.10par$datetime, "%Y%m%d")
tokyo.hours.10par %>%
+   dplyr::group_by(format(datetime, "%Y%m%d")) %>%
+   dplyr::summarise(date=mean(temperature))
tokyo.hours$date <- as.Date(format(tokyo.hours$datetime, "%Y/%m/%d"))
View(tokyo.hours)
summary(tokyo.hours)
tokyo.hours$date <- as.Date(format(tokyo.hours$datetime, "%Y/%m/%d"))
tokyo.hours %>%
+   dplyr::group_by(date) %>%
+   dplyr::summarise(temperature=mean(temperature))
tokyo.hours$date <- as.Date(format(tokyo.hours$datetime, "%Y/%m/%d"))
tokyo.hours %>%
+   dplyr::group_by(tokyo.hours,date) %>%
+   dplyr::summarise(temperature=mean(temperature))
dplyr::group_by(tokyo.hours, date)
dplyr::group_by(tokyo.hours, date) %>%
dplyr::summarise(temperature=mean(temperature))
tokyo.hours$date <- as.Date(format(tokyo.hours$datetime, "%Y/%m/%d"))
tokyo.hours %>%
dplyr::group_by(tokyo.hours, date) %>%
dplyr::summarise(temperature=mean(temperature))
tokyo.hours$date <- as.Date(format(tokyo.hours$datetime, "%Y/%m/%d"))
tokyo.hours %>%
dplyr::group_by(date) %>%
dplyr::summarise(temperature=mean(temperature))
tokyo.hours$date <- as.Date(format(tokyo.hours$datetime, "%Y/%m/%d"))
tokyo.days <-
dplyr::group_by(tokyo.hours, date) %>%
dplyr::summarise(temperature=mean(temperature))
View(tokyo.days)
tokyo.hours$location <- "tokyo"
View(tokyo.hours)
tokyo.hours <- read.csv("~/Projects/DataSicnce/sampling/data/tokyo.hours.csv", quote="")
# datatimeがカテゴリ型になっているのでPOSIXct（datetime）型に変換
tokyo.hours$datetime <- as.POSIXct(tokyo.hours$datetime, "%y/%m/%d %h:%m:%s")
tokyo.hours$location <- "tokyo"
hakodate.hours <- read.csv("~/Projects/DataSicnce/sampling/data/hakodate.hours.csv", quote="")
hakodate.hours$datetime <- as.POSIXct(hakodate.hours$datetime, "%y/%m/%d %h:%m:%s")
hakodate.hours$location <- "hakodate"
kumamoto.hours <- read.csv("~/Projects/DataSicnce/sampling/data/kumamoto.hours.csv", quote="")
kumamoto.hours$datetime <- as.POSIXct(kumamoto.hours$datetime, "%y/%m/%d %h:%m:%s")
kumamoto.hours$location <- "kumamoto"
japan.hours <- union(tokyo.hours, hakodate.hours, kumamoto.hours)
head(japan.hours)
summary(japan.hours)
ggplot(japan.hours, aes(x=datetime, y=temperature)) + geom_point() + geom_smooth()
ggplot(japan.hours, aes(x=datetime, y=temperature, colors=location)) + geom_point() + geom_smooth()
ggplot(japan.hours, aes(x=datetime, y=temperature)) + geom_point() + geom_smooth()
# sample_fracにより10%のデータ量にする
tokyo.hours.10par <- sample_frac(tbl = tokyo.hours, size = 0.1)
ggplot(tokyo.hours.10par, aes(x=datetime, y=temperature)) + geom_point() + geom_smooth()
# sample_fracにより10%のデータ量にする
japan.hours.10par <- sample_frac(tbl = japan.hours, size = 0.1)
ggplot(japan.hours.10par, aes(x=datetime, y=temperature)) + geom_point() + geom_smooth()
japan.hours$date <- as.Date(format(japan.hours$datetime, "%Y/%m/%d"))
japan.days <-
dplyr::group_by(japan.hours, date) %>%
dplyr::summarise(temperature=mean(temperature))
japan.hours$date <- as.Date(format(japan.hours$datetime, "%Y/%m/%d"))
japan.days <-
dplyr::group_by(japan.hours, date) %>%
dplyr::summarise(temperature=mean(temperature))
View(japan.days)
ggplot(japan.hours, aes(x=datetime, y=temperature)) + geom_point() + geom_smooth() + facet_wrap(~location)
ggplot(japan.hours, aes(x=datetime, y=temperature, color=location)) + geom_point() + geom_smooth() + facet_wrap(~location)
tokyo.hours <- read.csv("~/Projects/DataSicnce/sampling/data/tokyo.hours.csv", quote="")
# datatimeがカテゴリ型になっているのでPOSIXct（datetime）型に変換
tokyo.hours$datetime <- as.POSIXct(tokyo.hours$datetime, "%y/%m/%d %h:%m:%s")
tokyo.hours$location <- "tokyo"
hakodate.hours <- read.csv("~/Projects/DataSicnce/sampling/data/hakodate.hours.csv", quote="")
hakodate.hours$datetime <- as.POSIXct(hakodate.hours$datetime, "%y/%m/%d %h:%m:%s")
hakodate.hours$location <- "hakodate"
kumamoto.hours <- read.csv("~/Projects/DataSicnce/sampling/data/kumamoto.hours.csv", quote="")
kumamoto.hours$datetime <- as.POSIXct(kumamoto.hours$datetime, "%y/%m/%d %h:%m:%s")
kumamoto.hours$location <- "kumamoto"
japan.hours <- union(union(tokyo.hours, hakodate.hours), kumamoto.hours)
head(japan.hours)
summary(japan.hours)
ggplot(japan.hours, aes(x=datetime, y=temperature, color=location)) + geom_point() + geom_smooth() + facet_wrap(~location)
ggplot(japan.hours, aes(x=datetime, y=temperature, color=location)) + geom_point() + geom_smooth(color=black) + facet_wrap(~location)
ggplot(japan.hours, aes(x=datetime, y=temperature, color=location)) + geom_point() + geom_smooth(span=0.3, color=black) + facet_wrap(~location)
ggplot(japan.hours, aes(x=datetime, y=temperature, color=location)) + geom_point() + geom_smooth(span=0.3, color="black") + facet_wrap(~location)
# sample_fracにより10%のデータ量にする
japan.hours.10par <- sample_frac(tbl = japan.hours, size = 0.1)
ggplot(japan.hours.10par, aes(x=datetime, y=temperature)) + geom_point() + geom_smooth(span=0.3, color="black") + facet_wrap(~location)
# sample_fracにより10%のデータ量にする
japan.hours.10par <- sample_frac(tbl = japan.hours, size = 0.1)
ggplot(japan.hours.10par, aes(x=datetime, y=temperature, color=location)) + geom_point() + geom_smooth(span=0.3, color="black") + facet_wrap(~location)
japan.hours$date <- as.Date(format(japan.hours$datetime, "%Y/%m/%d"))
japan.days <-
dplyr::group_by(japan.hours, location, date) %>%
dplyr::summarise(temperature=mean(temperature))
japan.hours$date <- as.Date(format(japan.hours$datetime, "%Y/%m/%d"))
japan.days <-
dplyr::group_by(japan.hours, location, date) %>%
dplyr::summarise(temperature=mean(temperature))
ggplot(japan.hours, aes(x=date, y=temperature, color=location)) + geom_point() + geom_smooth(span=0.3, color="black") + facet_wrap(~location)
View(japan.days)
japan.hours$date <- as.Date(format(japan.hours$datetime, "%Y/%m/%d"))
japan.days <-
dplyr::group_by(japan.hours, location, date) %>%
dplyr::summarise(temperature=mean(temperature))
ggplot(japan.days, aes(x=date, y=temperature, color=location)) + geom_point() + geom_smooth(span=0.3, color="black") + facet_wrap(~location)
ggplot(japan.hours, aes(x=datetime, y=temperature, color=location)) + geom_point() + geom_smooth(span=0.3, color="black") + facet_wrap(~location)
japan.hours$date <- as.Date(format(japan.hours$datetime, "%Y/%m/%d"))
japan.summarize.hours <-
dplyr::group_by(japan.hours, datetime) %>%
dplyr::summarise(temperature=mean(temperature))
ggplot(japan.summarize.hours, aes(x=date, y=temperature)) + geom_point() + geom_smooth(span=0.3, color="black")
japan.hours$date <- as.Date(format(japan.hours$datetime, "%Y/%m/%d"))
japan.summarize.hours <-
dplyr::group_by(japan.hours, datetime) %>%
dplyr::summarise(temperature=mean(temperature))
ggplot(japan.summarize.hours, aes(x=datetime, y=temperature)) + geom_point() + geom_smooth(span=0.3)
japan.hours$date <- as.Date(format(japan.hours$datetime, "%Y/%m/%d"))
japan.summarize.hours <-
dplyr::group_by(japan.hours, datetime) %>%
dplyr::summarise(temperature=mean(temperature))
ggplot(japan.hours, aes(x=datetime, y=temperature)) + geom_point() + geom_smooth(span=0.3)
ggplot(japan.summarize.hours, aes(x=datetime, y=temperature)) + geom_point() + geom_smooth(span=0.3)
ggplot(japan.hours, aes(x=datetime, y=temperature)) + geom_point() + geom_smooth(span=0.3)
# 地点別
ggplot(japan.hours, aes(x=datetime, y=temperature, color=location)) + geom_point() + geom_smooth(span=0.3, color="black") + facet_wrap(~location)
ggplot(japan.hours, aes(x=datetime, y=temperature)) + geom_point() + geom_smooth(span=0.3)
